Assignment 7

I've manually hashed the grammer into some character values and fed it in the grammer.txt and fst-flw.txt
All the non-terminals are hashed to capital letters. Z is preserved for end-marker "$"
All the terminals are hashed to small letters. z is reserved for end-marker "$"
epsilon is given a special character "0"
the hashed values and their respective meanings are provided in the file meaning.txt
Thus if the production is 
S -> VE AE
and S has hashed value A, VE has hashed value B and AE has hashed value C, these are written in the grammer.txt as
A BC
similarly for the first and follow also


FILES with description:

grammer.txt contains the grammer in hashed form

fst-flw.txt has the first follow of the non-terminals in hashed form

meaning.txt has the meanings of the hashed values

tokens.txt is the intermediate file generated from the lexical analyzer in the hashed form.

input.in is the input file which is provided to the program via stdin

G29.7.l is the lex file which tokenizes the input file input.in (redirected from stdin) into the file tokens.txt

lex.yy.c is the autogenerated file

G29.7.c is the file which calls the lexical analyzer first, then it takes the grammer, first-follow, meaning files in their respective structures, then creates the parse table and finally parses the input token string.

grammer_table_module.c and grammer_table_module.h contains the functions for loading the grammer, first follow and meaning, and for creating the parse table

parser_module.c and parser_module.h contains the functions to parse the string. this module also internally creates and uses the stack to store the current state of the parser.

llparser is the generated object file

makefile.sh is the script to generate the lex.yy.c file from the l file and then compile all the modules to 1 object file


Compiling and running:
->run the script in the terminal as
./makefile.sh
it will compile and link all the modules in the llparser object file

->now execute the program as
./llparser < input.in


OUTPUT FORMAT:
-> Initially all the lexcal errors(if any) are printed, followed by a success message.
-> Then at each line we print the output production or the matched character or the error (whichever applicable) followed by the remaining input string
-> By default the stack is not printed in the output at every line. If you want to print the stack at every step, please uncomment "line-135" of "parser_module.c" file, and run it again as described above.

Submitted By:
Utkarsh Chanchlani 11CS10049
Rupesh Kumar 11CS30028
